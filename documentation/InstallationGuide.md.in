Installing Falaise from Source {#flinstallguide}
==============================

\tableofcontents

Introduction {#flinstall_intro}
============
This walkthrough is intended to get you up and running with Falaise
as fast as possible for both use and development of its programs and
libraries. We welcome constructive comments, criticisms and suggestions
for improvement of this guide, and these should be directed to the
SuperNEMO Software Working Group.

Preparing Your System for Installation {#flinstallguide_preparation}
======================================
To install the Falaise stack, you first need the following minimal
environment:

* UNIX Operating System
  * Linux x86_64
    * Ubuntu 14/15/16, SUSE 11/12, RedHat/CentOS/Scientific 6/7 are tested and supported
    * Other distributions should work provided they supply the software requirements listed below
  * Mac OS X 10.9/10/11 (Mavericks/Yosemite/El Capitan)
    * Earlier versions should work, but are not tested
* Several GB of free disk space:
  * At least 200MB for a source code check out
  * At least 6.5GB for a first from scratch build
* Familiarity with the UNIX command line
* Required Software
  * Subversion 1.6 or above
  * Git 1.9 or above
  * C/C++ compiler supporting at least the C++03 standard
    * GCC 4.5 or above, and Clang 3.1 or above are recommended
    * On OS X systems, you should install Xcode from the App Store, and ensure the Command Line Tools are installed

We recommend that the Required Software are installed via the relevant
package manager on Linux (e.g. yum, apt). On OS X, Xcode will supply
everything needed.

Installing Falaise Using the `CadfaelBrew` Package Manager {#flinstallguide_cadfaelbrew}
==========================================================
If you simply wish to use Falaise, we recommend installing it using the
[`Cadfaelbrew`](https://github.com/SuperNEMO-DBD/cadfaelbrew) package
manager. This provides the complete stack of packages required by Falaise
and may be installed using the following commands:

~~~~~
$ cd $HOME
$ git clone https://github.com/SuperNEMO-DBD/cadfaelbrew.git cadfaelbrew
$ export PATH="$HOME/cadfaelbrew/bin:$PATH"
$ brew cadfael-bootstrap
$ brew install falaise
~~~~~

For further information, including troubleshooting the installation,
please refer to the [`Cadfaelbrew` project page](https://github.com/SuperNEMO-DBD/cadfaelbrew).

Installing Falaise from Source
==============================
In addition to the core system listed above, Falaise requires several
third party libraries to implement its functionality, specifically

- C++11 Compliant Compiler (GCC >=4.9, Clang >= 3.4, Intel >= 15)
- [CMake](http://www.cmake.org) 3.3 or higher
- Make, Ninja or Xcode buildtools
- [Bayeux C++ Libraries]() 2.1.0 and higher.
- [Boost C++ Libraries](http://www.boost.org) 1.55.0 and higher
- [CAMP C++ Reflection Library](https://github.com/tegesoft/camp) 0.7.1 and higher
- [CLHEP C++ HEP Library](http://proj-clhep.web.cern.ch/proj-clhep/) 2.1.3.1 and higher
- [GNU Scientific Library](http://www.gnu.org/software/gsl/) 1.15 and higher
- [ROOT C++ HEP Toolkit](http://root.cern.ch) 5.34.30 and higher (6 series currently unsupported)
- [Geant4 C++ Toolkit for Detector Simulations](http://geant4.cern.ch) 9.6.4 and higher

You can reuse existing installations of these libraries to build Falaise
provided they meet the listed version requirements. Alternatively, all
are available through `CadfaelBrew` and can be installed following the
[instructions given above](@ref flinstallguide_cadfaelbrew).


Setting up a Working Copy of Falaise {#flinstallguide_getting}
------------------------------------
Falaise code is managed using the Subversion repository hosted by
[LPC Caen](https://nemo.lpc-caen.in2p3.fr). Whilst you need a full account
to commit to the repository, we will be using the provided read-only
access. To work with the software, we recommend using the following
workspace directories:

~~~~~
SuperNEMO/
|-- lpc-caen.svn
|-- builds
|-- installs
~~~~~

where the `SuperNEMO` directory can be located where you wish, though it
must be on a filesystem with the required free space. You do not have to
follow this layout, but we recommend it as a fast and convenient way to
organise things.

If you already have a workspace setup, then you can skip to the
[following section](@ref flinstallguide_installation_checkout). Otherwise
to create it, open a terminal, and choose a directory for your
SuperNEMO workspace. For clarity in this guide, because absolute paths are
needed in certain cases, we will use the dummy directory `/Users/snemo`,
but you should choose your own location. The first step is to create the
directory hierarchy:

~~~~~
$ cd /Users/snemo
$ mkdir -p SuperNEMO/{lpc-caen.svn,builds,installs}
$ cd SuperNEMO
$ ls
builds  installs  lpc-caen.svn
~~~~~

With the directories in place, we can checkout the code. This is done
via the `svn` command line client, and we be using a "sparse checkout"
pattern. Whilst this requires a few more steps upfront, it provides
a very stable and well organised working copy.

Note that in the following, we demonstrate how create a checkout by the
fastest and easiest means possible. This means that you end up with:

* A read-only repository
  * You can update, view logs and create diffs and patches
  * You cannot commit changes

If you already have a developer's account at LPC Caen, then the following
instructions will also work, simply remove the `--username` and
`--no-auth-cache` arguments from the svn commands.

~~~~~
$ pwd
/path/to/your/chosen/workspace/SuperNEMO
$ svn co https://nemo.lpc-caen.in2p3.fr/svn --username=visitor --no-auth-cache \
--depth empty lpc-caen.svn
~~~~~

At this point, you may see a warning about certificates:

~~~~~
Error validating server certificate for 'https://nemo.lpc-caen.in2p3.fr:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
 - The certificate hostname does not match.
 - The certificate has expired.
Certificate information:
 - Hostname: caedev.in2p3.fr
 - Valid: from Thu, 15 May 2008 11:52:02 GMT until Fri, 15 May 2009 11:52:02 GMT
 - Issuer: LPC Caen, CNRS, Caen, France, Fr
 - Fingerprint: ae:89:9e:38:e3:80:a7:a3:b2:1e:df:5e:eb:33:2d:ba:83:be:b7:11
(R)eject, accept (t)emporarily or accept (p)ermanently? p
~~~~~

Simply press `t` or `p` to accept the certificate. The process will
then continue by asking for the password for `visitor`, for which you
should enter `anonymous` (If you have accessed the LPC repository before,
you may not see either the certificate check or password prompt).

~~~~~
Password for 'visitor':
Checked out revision 13809.
~~~~~

The revision number you see will vary depending on the current state of
development. If you now list the contents of the `lpc-caen.svn` directory
it will be empty apart from a `.svn` directory. We now checkout the parts
we need, specifically the `Falaise` project.

~~~~~
$ pwd
/Users/snemo/SuperNEMO
$ cd lpc-caen.svn
$ svn up --set-depth immediates Falaise
A    Falaise
A    Falaise/trunk
A    Falaise/branches
A    Falaise/tags
Updated to revision 13851.
~~~~~

As above, the revision number will depend on the current state of development.
Each LPC project is organised using the standard Subversion directory layout
of `trunk` for the mainline of development, `branches` for feature
implementation and bug fixes, and `tags` for releases.

An `ls` of the above directories will show that, again, they are empty.
However, if you use Subversion's `ls` command, e.g.

~~~~~
$ svn ls Falaise/trunk
CMakeLists.txt
...
~~~~~

you will get a listing of the contents in the upstream repository.
This is what we mean by a "sparse checkout". Such a working copy allows you
to query the repository for what is available, and then choose
the parts you want to checkout. For example, you can get a list of the
current tags of Falaise by doing

~~~~~
$ svn ls Falaise/tags
Falaise-1.0.0
Falaise-2.0.0
Falaise-2.1.0
~~~~~

Tags are always named using the standard `MAJOR.MINOR.PATCH` convention
with an optional additional `-STATUSN` flag to indicate development lines.

Checking out Falaise {#flinstallguide_installation_checkout}
--------------------
With the workspace in place, we can checkout the required development
line of Falaise. The version of Falaise to which this
documentation refers is @Falaise_VERSION@, and to check out the tag
for this version we do

~~~~~
$ svn ls Falaise/tags
...
$ svn up --set-depth infinity Falaise/tags/Falaise-@Falaise_VERSION@
~~~~~

The basic source code working copy is now in place. For more details on
using Subversion, we recommend the [Subversion Red Bean Guide](http://svnbook.red-bean.com/).


Configuring, Building and Installing Falaise {#flinstallguide_buildinstall}
--------------------------------------------
Falaise uses the [CMake](http://www.cmake.org) tool for driving the
configure, build and install of its core library and applications.
To start, go into your SuperNEMO workspace and create a build directory:

~~~~~
$ cd /Users/snemo/SuperNEMO
$ ls
builds  installs  lpc-caen.svn
$ cd builds
$ mkdir falaise-@Falaise_VERSION@
$ cd falaise-@Falaise_VERSION@
~~~~~

the naming of the directory is arbitrary, but it's useful to give them
a name related to the build task.

We now run cmake as follows to configure the build to install under our
workspace area,

~~~~~
$ cmake -DCMAKE_INSTALL_PREFIX=/Users/snemo/SuperNEMO/installs/falaise-@Falaise_VERSION@ \
 ../../lpc-caen.svn/Falaise/tags/Falaise-@Falaise_VERSION@
-- The C compiler identification is GNU 4.9.3
-- The CXX compiler identification is GNU 4.9.3
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found Doxygen: /usr/bin/doxygen (found suitable version "1.8.1.2", minimum required is "1.8")
Boost  found.
Found Boost components:
   thread
-- Found Doxygen: /usr/bin/doxygen (found suitable version "1.8.1.2", minimum required is "1.8.0")
Boost  found.
Found Boost components:
   program_options;filesystem;system
Boost  found.
Found Boost components:
   program_options
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/snemo/SuperNEMO/builds/falaise-@Falaise_VERSION@
~~~~~

The `CMAKE_INSTALL_PREFIX` variable tells cmake where to install the
products of the build. The exact output in this step will depend on the
OS you are running on, the compiler detected and the exact CMake version
(later versions are more verbose). The important thing to check is that
you see the last three lines

~~~~~
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/snemo/SuperNEMO/builds/falaise-@Falaise_VERSION@
~~~~~

which indicate a successful configuration. If you see errors at this
point, they are most likely due to a failure to locate a required
external package. Generally these can be resolved by add the location
of the missing package to the [`CMAKE_PREFIX_PATH` variable](https://cmake.org/cmake/help/v3.3/variable/CMAKE_PREFIX_PATH.html), either
on the command line or by setting this in the environment.

Once configuration has completed without error, a makefile for building
Falaise will have been generated. We can now run `make` to build
everything:

~~~~~
$ make -j4
Scanning dependencies of target falaise_io
Scanning dependencies of target Bayeux_mctools_geant4
[  0%] Building CXX object source/flreconstruct/CommissioningIO/CMakeFiles/falaise_io.dir/DriftModel.cc.o
...
~~~~~

You should select the integer passed to `-j` based on the number of
cores your system has, e.g. 4 for a quad core system. With parallel builds
the exact output will vary, but a successful build will generally be
indicated by the last lines being:

~~~~~
[100%] Built target flreconstruct
[100%] Built target flsimulate
~~~~~

Development of Falaise enforces removal of compiler warnings as far as
possible, so you should not see any when building release versions
on the tested platforms listed earlier. If you do see any warnings or
errors, these should be reported to the Software Working Group. Warnings
should not affect success of the build, but if you are in any doubt as to
this, simply run make again without the `-j` argument and you should see
output similar to:

~~~~~
$ make
[ 89%] Built target Bayeux
[ 94%] Built target Bayeux_mctools_geant4
[ 94%] Built target bayeux_docs
[ 97%] Built target Falaise
[ 97%] Built target flsimulate
[ 98%] Built target flreconstruct
[ 99%] Built target falaise_io
[100%] Built target testCommissioningIO
[100%] Built target falaise_docs
~~~~~

After a successful build, you can install Falaise to the location you
passed to `CMAKE_INSTALL_PREFIX` with

~~~~~
$ make install
~~~~~

This will install everything required into a POSIX style hierarchy under
the install prefix:

~~~~~
installs/falaise-@Falaise_VERSION@
|-- bin
|-- include
|   |-- bayeux
|   `-- falaise
|-- lib{64}
|   |-- cmake
|   `-- Falaise
`-- share
    |-- Bayeux-1.0.0
    `-- Falaise-@Falaise_VERSION@
~~~~~

The `64` suffix to the library directory will only be present on Linux
systems that enforce the `lib64` convention.

Using an Install of Falaise {#flinstallguide_using}
---------------------------
With an install in place, you do not need any further setup to use
the applications. All programs ay be run directly from the command line, e.g.

~~~~~
$ cd /Users/snemo/SuperNEMO
$ ./installs/falaise-@Falaise_VERSION@/bin/flsimulate -h
...
$
~~~~~

Of course you may, at your convenience, prepend the `bin` directory to
your UNIX `PATH` but this is not required.

By default, Falaise installs Doxygen based documentation for the Falaise
C++ API and the `flsimulate` and `flreconstruct` programs. To view this,
simply point your web browser to the file:

~~~~~
installs/falaise-@Falaise_VERSION@/share/Falaise-@Falaise_VERSION@/Documentation/API/html/index.html
~~~~~

A quick way to open this on Mac OS X systems is to run

~~~~~
$ open installs/falaise-@Falaise_VERSION@/share/Falaise-@Falaise_VERSION@/Documentation/API/html/index.html
~~~~~

which will open the file your preferred HTML viewer.
On Linux, this is can be done via

~~~~~
$ xdg-open installs/falaise-@Falaise_VERSION@/share/Falaise-@Falaise_VERSION@/Documentation/API/html/index.html
~~~~~

though the existence of the `xdg-open` program may be dependent on the
system you are running on.

The front page provides guidance on the layout of the documentation, with
links to the detailed guides on using `flsimulate` and `flreconstruct`.


Troubleshooting {#flinstallguide_trouble}
---------------
Whilst this walkthrough guide should cover most uses cases, we cannot
guarantee that problems will not be encountered. If you do experience
issues with any of the steps, please contact us, in the first instance
email your issue to:

* Ben Morgan (Ben.Morgan@warwick.ac.uk)

Please attach as much information as possible (operating system and version,
compiler and version, CMake version etc) to assist in diagnosing the
issue.

Developing Falaise {#flinstallguide_developing}
==================
Development of Falaise falls into two main categories

* Implementing features in the Falaise core
* Implementing new plug-in modules for use in `flreconstruct`

The first of these generally, though not exclusively, requires a
developer account on the LPC Caen Trac system (one can also create and
submit patches). Development of plugins does not require a developer
account, though will do should your module become part of the core.

We still recommend using the simple three level layout described earlier
as the sparse checkout allows you full and easy access to all repository
information. You can also easily add your own repositories if you are
doing private development, e.g.

~~~~~
SuperNEMO/
|-- lpc-caen.svn
|-- my-repo.git
|-- builds
|-- installs
~~~~~

To checkout the trunk of Falaise, we use the same procedure as for
checking out a release and just change the path slightly:

~~~~~
$ cd /Users/snemo/SuperNEMO
$ ls
builds  installs  lpc-caen.svn
$ cd lpc-caen.svn
$ svn up --set-depth infinity Falaise/trunk
...
$ ls Falaise/trunk
cmake           documentation  README.rst  utilities
CMakeLists.txt  LICENSE.txt    resources
COPYING.txt     modules        source
$
~~~~~

This trunk version can be built just as the tagged release versions.
In addition to the basic build, the unit and integration tests should
always be built and run for the trunk build, and this can be done by
running either

~~~~~
$ make test
~~~~~

or

~~~~~
$ ctest
~~~~~

in the build directory.

Builds of the trunk can also be installed, but is recommended not to do
this due to the rapid development cycle expected and the need to run tests. All of the programs and libraries in
a build of Falaise are directly usable without installation, and are
output to a directory named `BuildProducts` under the main build directory:

~~~~~
$ cd /Users/snemo/SuperNEMO/builds
$ ls
falaise-@Falaise_VERSION@  trunk
$ cd trunk
$ ls
BuildProducts   cmake_install.cmake  install_manifest.txt  modules    Testing
CMakeCache.txt  CTestTestfile.cmake  InstallTreeFiles      resources  utilities
CMakeFiles      documentation        Makefile              source
$
~~~~~

The structure of the `BuildProducts` directory is designed to match that
of the installed Falaise:

~~~~~
BuildProducts/
|-- bin
|   |-- flreconstruct
|   |-- flsimulate
|-- include
|   `-- falaise
|-- lib64
|   |-- Falaise
|   |-- cmake
|   `-- libFalaise.so
`-- share
    `-- Falaise-1.0.0
~~~~~

The executables under `BuildProducts/bin` are directly runnable, so
you can rapidly develop, compile and run without having to reinstall.
Whilst the trunk aims for stability, full functionality cannot
be guaranteed but you are welcome to try it and report any issues you
find. Contributing to Falaise requires familiarity with Subversion, CMake,
the C++ language and modern software development practices.
An introduction to these topics is in preparation in a [dedicated topic](@ref developingfalaise).
