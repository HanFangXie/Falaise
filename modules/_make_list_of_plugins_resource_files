#!/usr/bin/env bash
#
# Author(s) : Francois Mauger <mauger@lpccaen.in2p3.fr>
# Creation date: 2014-02-27
# Last modified: 2014-06-01
#
# Copyright 2014 F. Mauger <mauger@lpccaen.in2p3.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public  License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
#
# Description:
#
#   This  script  automatically  builds  the list  of  resource  files
#   provided  by various  plugins/modules.  It  must be  ran from  the
#   modules source directory. The list of resource files associated to
#   a  given   plugin  is   conventionnaly  stored  in   the  module's
#   "resources/_resources.cmake"  file. All  files or  directories the
#   names   of    which   starts   with   an    underscore   are   not
#   published. Subversion  directories ".svn" as well  as backup files
#   with suffix "~" are ignored too.
#

# List of known plugins (unused):
# plugins="things2root MockTrackerClusterizer CAT TrackFit VisuToy"

only_plugins=

function print_usage()
{
    cat<<EOF

_make_list_of_plugins_resource_files :

   Update the list of publishable resource files for Falaise's modules.

Usage:

  _make_list_of_plugins_resource_files -h|--help :

     Print this help then exit.

  _make_list_of_plugins_resource_files -o|--only MODULE_NAME :

     Only update the list of publishable resource files for
     module named MODULE_NAME.

Example:

  ./_make_list_of_plugins_resource_files --only VisuToy

EOF
    return 0
}

while [ -n "$1" ]; do
    token="$1"
    if [ "x${token:0:1}" = "x-" ]; then
	option="${token}"
	if [ "${option}" = "-h" -o "${option}" = "--help" ]; then
	    print_usage
	    exit 0
	elif [ "${option}" = "-o" -o "${option}" = "--only" ]; then
	    shift 1
	    plugin="$1"
	    only_plugins="${only_plugins} ${plugin} "
	else
	    echo "WARNING: Ignoring option '${option}'..." >&2
	fi
    else
	argument="${token}"
	echo "WARNING: Ignoring argument '${argument}'..." >&2
    fi
    shift 1
done

# Trim list of plugins:
tmp=$(echo "${only_plugins}" | sed -e 's/^ *//' -e 's/ *$//')
only_plugins="${tmp}"
echo "NOTICE: Only plugins : '${only_plugins}'" >&2

resources_list_cmake="_resources.cmake"

_dirlist=$(find . -maxdepth 1 -type d | grep -v ^./.svn | grep -v ^.$)

for _dir in ${_dirlist}; do
    if [ -d ${_dir}/resources/ ]; then
	_plugin_name=$(basename ${_dir})
	do_it=0
	if [ "x${only_plugins}" = "x" ]; then
	    # Update all plugins' resource files tree:
	    do_it=1
	else
	    # Update only plugins' resource files tree:
	    echo "${only_plugins}" | tr [[:space:]] ' ' | tr -s ' ' | tr ' ' '\n' | grep "${_plugin_name}" > /dev/null 2>&1
	    if [ $? -eq 0 ]; then
		do_it=1
	    fi
	fi
	if [ ${do_it} -eq 1 ];then
	    echo "NOTICE: Building list of resource files for plugin '${_plugin_name}'..." >&2
	    if [ -f ${_plugin_name}/resources/_resources.cmake ]; then
		mv -f ${_plugin_name}/resources/_resources.cmake ${_plugin_name}/resources/_resources.cmake.bak
	    fi
	    touch ${_dir}/resources/${resources_list_cmake}
	    cat > ${_dir}/resources/${resources_list_cmake} <<EOF
list(APPEND _falaise_${_plugin_name}_RESOURCES_FILES
EOF
	    find ${_dir}/resources/ -type f | grep -v "/_" | grep -v "~$" | grep -v /.svn/ | sed -e "s@^${_dir}/resources/@\${PROJECT_SOURCE_DIR}/modules/${_plugin_name}/resources/@g" >> ${_dir}/resources/${resources_list_cmake}

	    cat >> ${_dir}/resources/${resources_list_cmake} <<EOF
)
EOF
	    ls -l ${_dir}/resources/
	fi # [ ${do_it} -eq 1 ]
    fi
done

exit 0
