// falaise/falaise.cc - Implementation of falaise init function
//
// Copyright (c) 2013 by Ben Morgan <bmorgan.warwick@gmail.com>
// Copyright (c) 2013 by The University of Warwick
// Copyright (c) 2013 by Francois Mauger <mauger@lpccaen.in2p3.fr>
// Copyright (c) 2013 by Universit√© de Caen
//
// This file is part of Falaise.
//
// Falaise is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Falaise is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Falaise.  If not, see <http://www.gnu.org/licenses/>.

// Standard library
#include <iostream>

// Third party
// - Bayeux
#include <bayeux/bayeux.h>
// Tests
// - datatools
#include <bayeux/datatools/exception.h>

// Mute some specific "shadow" warnings in Boost <=1.55:
#if defined (__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"
#endif
#if defined (__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif

#include <bayeux/datatools/kernel.h>

#if defined (__GNUC__)
#pragma GCC diagnostic pop
#endif
#if defined (__clang__)
#pragma clang diagnostic pop
#endif

#include <bayeux/datatools/library_info.h>

// Ourselves
#include "falaise/falaise.h"
#include "falaise/version.h"
#include "falaise/resource.h"


namespace {

void falaise_initialize_impl()
{
  falaise::init_resources();

  DT_THROW_IF(!datatools::kernel::is_instantiated(),
              std::runtime_error,
              "The Bayeux/datatools kernel is not instantiated !");
  datatools::kernel & krnl = datatools::kernel::instance();

  // Populate the library info register, basically dumb if we don't
  // have it soe assume it exists and hpe for an exception if
  // it doesn't
  datatools::library_info & lib_info_reg = krnl.grab_library_info_register();
  krnl.tree_dump();
  // Bundled submodules:
  {
    // Falaise itself:
    DT_THROW_IF (lib_info_reg.has("falaise"),
                 std::logic_error,
                 "falaise is already registered !");
    datatools::properties & falaise_lib_infos
        = lib_info_reg.registration("falaise",
                                    "Falaise provides the main computational environment for the simulation,"
                                    "processing and analysis of data for the SuperNEMO double beta decay "
                                    "search experiment.",
                                    falaise::version::get_version()
                                   );

      // Register the Falaise resource path in the datatools' kernel:
      falaise_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                     falaise::get_resource_dir()
                                    );

      // If the 'FALAISE_RESOURCE_DIR' environment variable is set, it will supersed
      // the official registered resource path above through the 'datatools::fetch_path_with_env'
      // function:
      falaise_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                     "FALAISE_RESOURCE_DIR"
                                    );

      // Register the Falaise plugin path in the datatools' kernel:
      falaise_lib_infos.store_string(datatools::library_info::keys::install_plugin_lib_dir(),
                                     falaise::get_plugin_dir()
                                    );

      // If the 'FALAISE_PLUGIN_LIB_DIR' environment variable is set, it will supersed
      // the official registered plugin path above through the 'datatools::library_loader'
      // function:
      falaise_lib_infos.store_string(datatools::library_info::keys::env_plugin_lib_dir(),
                                     "FALAISE_PLUGIN_LIB_DIR"
                                    );
    }
}

  void falaise_terminate_impl()
  {
    if (datatools::kernel::is_instantiated()) {
      datatools::kernel & krnl = datatools::kernel::instance();
      if (krnl.has_library_info_register()) {
        // Access to the datatools kernel library info register:
        datatools::library_info & lib_info_reg = krnl.grab_library_info_register();

        // Unregistration of all registered submodules from the kernel's
        // library info register:
        if (lib_info_reg.has("falaise")) {
          lib_info_reg.unregistration("falaise");
        }
      }
    }
    return;
  }

}

namespace falaise {

  void initialize(int argc_, char * argv_[])
  {
    static bool _init = false;
    if (! _init) {
      // Wrap Bayeux initialization because we need resources from various Bayeux's modules:
      ::bayeux::initialize(argc_,argv_);

      // Tests :
      // datatools::kernel & krnl = datatools::kernel::instance();
      // if (krnl.has_library_info_register()) {
      //   datatools::library_info & lib_info_reg
      //     = krnl.grab_library_info_register();
      //   lib_info_reg.tree_dump(std::cerr, "falaise::initialize: Before special initialize", "DEVEL: ");
      // }

      // Initialization code from Falaise itself:
      falaise_initialize_impl();
      _init = true;
    } else {
      DT_THROW_IF(true, std::logic_error,
                  "Attempt to initialize the already initialized Falaise library!");
    }
    return;
  }

  void terminate()
  {
    static bool _fini = false;
    if (! _fini) {
      // Termination code for Falaise:
      falaise_terminate_impl();

      // Wrap Bayeux termination:
      ::bayeux::terminate();
      _fini = true;
    } else {
      DT_THROW_IF(true, std::logic_error,
                  "Attempt to terminate the already terminated Falaise library!");
    }
    return;
  }

} // namespace falaise
